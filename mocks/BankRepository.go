// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	model "financial/src/model"

	mock "github.com/stretchr/testify/mock"
)

// BankRepository is an autogenerated mock type for the BankRepository type
type BankRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: amount
func (_m *BankRepository) Create(amount float64) (model.Bank, error) {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Bank
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (model.Bank, error)); ok {
		return rf(amount)
	}
	if rf, ok := ret.Get(0).(func(float64) model.Bank); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Get(0).(model.Bank)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: bankID
func (_m *BankRepository) Get(bankID int) (model.Bank, error) {
	ret := _m.Called(bankID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Bank
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Bank, error)); ok {
		return rf(bankID)
	}
	if rf, ok := ret.Get(0).(func(int) model.Bank); ok {
		r0 = rf(bankID)
	} else {
		r0 = ret.Get(0).(model.Bank)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(bankID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *BankRepository) GetAll() ([]model.Bank, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Bank
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Bank, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Bank); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Bank)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBankRepository creates a new instance of BankRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBankRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BankRepository {
	mock := &BankRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
