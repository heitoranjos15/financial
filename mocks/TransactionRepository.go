// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	dto "financial/src/dto"
	model "financial/src/model"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: data
func (_m *TransactionRepository) CreateTransaction(data dto.CreateTransactionRequest) (model.Transaction, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateTransactionRequest) (model.Transaction, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateTransactionRequest) model.Transaction); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateTransactionRequest) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
